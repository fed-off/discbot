const { createConversation } = require('@grammyjs/conversations');
const { InlineKeyboard } = require('grammy');
const { updateUser, getUser } = require('../mongodb');

async function settingsConversation(conversation, ctx) {
  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const settingsMenu = new InlineKeyboard()
      .text('–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å', 'set_timezone')
      .text('–í—Ä–µ–º—è –∑–∞—Å—ã–ø–∞–Ω–∏—è', 'set_bedtime').row()
      .text('–í—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è', 'set_wakeup').row()
      .text('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'set_notifications')
      .text('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel');

    const menuMessage = await ctx.reply('–ß—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?', {
      reply_markup: settingsMenu
    });

    // –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä –∏–∑ –º–µ–Ω—é
    const { callbackQuery } = await conversation.waitFor('callback_query:data');
    const choice = callbackQuery.data;

    // –£–¥–∞–ª—è–µ–º –º–µ–Ω—é
    await conversation.external(() => ctx.api.deleteMessage(ctx.chat.id, menuMessage.message_id));

    if (choice === 'cancel') {
      await ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
      return;
    }

    if (choice === 'set_timezone') {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
      const timezoneMenu = new InlineKeyboard()
        .text('+3 –ú–°–ö', 'tz_+3_MSK')
        .text('+0 –õ–æ–Ω–¥–æ–Ω', 'tz_+0_London')
        .text('+5 –ï–ö–ë', 'tz_+5_EKB')
        .text('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel');

      const timezoneMessage = await ctx.reply('–í—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:', {
        reply_markup: timezoneMenu
      });

      // –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä –ø–æ—è—Å–∞
      const { callbackQuery: tzQuery } = await conversation.waitFor('callback_query:data');
      const tzChoice = tzQuery.data;

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ—è—Å–∞
      await conversation.external(() => ctx.api.deleteMessage(ctx.chat.id, timezoneMessage.message_id));

      if (tzChoice === 'cancel') {
        await ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
      const timezoneMap = {
        'tz_+3_MSK': '+3 –ú–°–ö',
        'tz_+0_London': '+0 –õ–æ–Ω–¥–æ–Ω',
        'tz_+5_EKB': '+5 –ï–ö–ë'
      };

      const selectedTimezone = timezoneMap[tzChoice];
      if (selectedTimezone) {
        await conversation.external(async () => {
          await updateUser({
            chatId: ctx.chat.id,
            username: ctx.from.username || 'Unknown',
            timezone: selectedTimezone
          });
        });
        await ctx.reply(`–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${selectedTimezone}`);
      } else {
        await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.');
      }
    } else {
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
      await ctx.reply('–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    const user = await conversation.external(() => getUser(ctx.chat.id));
    if (user) {
      const profile = `üìã –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n` +
        `üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || '-'}\n` +
        `üò¥ –í—Ä–µ–º—è –∑–∞—Å—ã–ø–∞–Ω–∏—è: ${user.bedtime || '-'}\n` +
        `‚òÄÔ∏è –í—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è: ${user.wakeupTime || '-'}\n` +
        `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.notifications ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}`;

      const keyboard = new InlineKeyboard().text('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å', 'setup_profile');
      await ctx.reply(profile, { reply_markup: keyboard });
    } else {
      await ctx.reply('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π /start.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    await ctx.reply('–£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò•');
  }
}

module.exports = { settingsConversation: createConversation(settingsConversation, 'settings') };